
generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


enum userRole {
  STUDENT
  TEACHER
}

model Account {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  userId             String @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.ObjectId
  access_token       String?  @db.ObjectId
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.ObjectId
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}


model User {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  hashedPassword String?
  image         String?
  role        userRole @default(STUDENT)
  accounts      Account[]
  verificationToken AuthToken?    @relation(name: "VerificationToken")
  passwordResetToken  AuthToken?  @relation(name: "PasswordResetToken")

  courses Course[]
}


model AuthToken {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  userId  String  @db.ObjectId @unique
  token String @unique
  expires DateTime
  verifyuser  User @relation(fields: [userId],name: "VerificationToken",references: [id],onDelete: Cascade) 
  passwordResetuser  User @relation(fields: [userId],name: "PasswordResetToken",references: [id],onDelete: Cascade) 
}


// main database 

model Course {
  id String @id @default(auto()) @map("_id") @db.ObjectId 
  userId String @db.ObjectId
  categoryId String? @db.ObjectId
  title String @db.String //@unique
  description String? @db.String 
  imageUrl String? @db.String 
  price Float? @default(0.0)
  isPublished Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  attachments Attachment[]
  chapters Chapter[]
  purchases Purchase[]

  user User @relation(fields: [userId],references: [id], onDelete: Cascade)
  category Category? @relation(fields: [categoryId],references: [id], onDelete: Cascade)

  @@index([categoryId])
  @@fulltext([title])
}

model Category {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique
  courses Course[]
}

model Attachment {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  courseId String @db.ObjectId
  
  name String
  url String @db.String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  course Course @relation(fields: [courseId],references: [id],onDelete:Cascade)
}

// chapter 
model Chapter {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String 
  description String? @db.String
  videoUrl String? @db.String 
  position Int 
  isPublished Boolean @default(false)
  isFree Boolean @default(false)
  muxData MuxData? 

  courseId String @db.ObjectId
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  userProgress userProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// UserProgress 
model userProgress {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  isCompleted Boolean @default(false)
  userId String 
  chapterId String @db.ObjectId
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([chapterId])
  @@unique([userId, chapterId])
}

// MuxData 
model MuxData{
  id String @id @default(auto()) @map("_id") @db.ObjectId 
  assetId String 
  playbackId String? 
  chapterId String @db.ObjectId  @unique
  chapter Chapter @relation(fields: [chapterId],references: [id],onDelete: Cascade)
}

// Purchase 
model Purchase {
  id String @id @default(auto()) @map("_id") @db.ObjectId 
  userId String @db.ObjectId
  courseId String @db.ObjectId 
  course Course @relation(fields: [courseId],references: [id],onDelete: Cascade)

  createdAt DateTime @default(now()) 
  updatedAt DateTime @updatedAt
  @@unique([userId, courseId])
  @@index([courseId])
}


// StripeCustomer 
model StripeCustomer {
  id String @id @default(auto()) @map("_id") @db.ObjectId 
  userId String @unique
  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}